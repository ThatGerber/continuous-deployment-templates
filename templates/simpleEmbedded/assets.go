// Code generated by go-bindata.
// sources:
// templates/simpleEmbedded/files/deployment.tf
// templates/simpleEmbedded/files/deployment_inputs.tf
// templates/simpleEmbedded/files/deployment_outputs.tf
// templates/simpleEmbedded/files/terraform.tfvars
// DO NOT EDIT!

package simpleEmbedded

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesDeploymentTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6f\xdb\x3a\x10\xbc\xeb\x57\x10\x7c\x39\xbc\xf7\x00\x51\x76\x11\x24\xc8\xc1\xa7\xfe\x84\x02\xbd\x04\x06\xb1\x96\xd6\x11\x61\x7e\x08\xe4\x52\xae\x22\xe8\xbf\x17\x24\xe5\xd8\x6e\x82\xda\x17\x7b\x67\x38\xb3\xda\xe1\xaa\xea\x80\x80\x71\x38\x07\x09\x23\x28\x0d\x07\xa5\x15\x4d\xf2\xdd\x59\x0c\x9c\xf1\xb5\xa8\x91\xb3\x79\xa9\x6e\xd9\x46\x71\xc6\xe3\x21\x5a\x8a\xf2\x17\x5a\x05\x9a\xb3\xb9\x62\xcc\xb8\x40\xd2\x63\x8b\x96\xd8\x8e\x91\x8f\x58\x55\x8c\x1d\x95\x26\xf4\x99\xc0\x98\x05\x83\x8c\xb1\x1d\xe3\xe9\x17\xcf\xb5\x11\x74\xc4\xc0\x76\xec\x75\x15\x6d\x94\x81\x37\x0c\x4d\x3f\x9a\x3a\x84\xae\x29\xd5\xba\x58\xd5\xdb\x27\xb1\x79\xac\xc1\x74\x4f\x8f\x75\x40\x3f\xa2\xaf\xff\xe7\xfb\x8a\xb1\xe5\x2f\x6e\xa3\xf2\x14\x41\xab\x77\x20\xe5\x6c\x4d\xd3\xf0\xd9\xbc\x1f\xcd\x55\xc7\x9d\x2d\xfa\x52\xdf\xbc\xbc\x3c\x7f\xdb\x6c\x37\x2f\x8f\xcf\xcf\x7c\xcf\xfe\x61\xdf\xc1\x3a\xab\x5a\xd0\xd5\x52\x55\x1e\x83\x8b\xbe\xc5\x32\x9b\x13\x4e\x72\x00\xe5\x39\xe3\x84\x81\xca\x5c\x52\xf1\xda\x4a\xaa\xd7\x27\x9c\x92\xff\x10\x0f\x5a\xb5\xe9\x54\x42\x1e\xe6\xa3\xd2\xf8\x2f\x7f\x98\x47\xf0\x22\x84\x5e\x5e\x71\x39\x00\xf5\x0b\xff\x6f\xe1\xc9\xd4\xb8\x2e\x6a\x64\xdc\x22\x9d\x9d\x3f\x15\x9b\xb5\x8f\xfb\xcf\x8e\xf1\x37\x45\x7d\x3c\x88\xd6\x99\x86\xd0\x7b\x38\x3a\x6f\xea\xd6\x19\x13\xad\xa2\xa9\x2e\x5a\xa1\xa1\xa3\x4c\x4f\x30\x0e\x6d\xea\x6c\xed\xf7\x93\x98\x07\xdb\xf6\xe8\xeb\xb5\x47\x82\xf6\xb4\xd4\xdd\xa6\xfc\x45\x3b\x2a\xef\xac\x41\x4b\x4b\x12\x69\x55\xe7\xbf\x12\x29\xec\xb5\x79\x99\x58\x99\x3e\x78\x35\x02\xa1\x0c\xf1\x60\x91\xc2\x85\xfe\xba\xbf\x4e\xea\x0e\xca\xe9\x6c\x37\x22\x7f\x9b\xed\x53\x4e\x0f\xde\xc3\x27\xcb\x4c\x7c\x98\xd3\x15\x16\x5f\xdf\x77\xf1\x71\xdb\x45\x7a\xf2\xb0\x64\x2d\xb4\xa9\x22\x3b\x1b\x64\xef\x02\x65\xe4\x72\xb3\xef\xd0\x10\x87\xc1\x79\xca\x4e\xf7\xa8\x05\x92\x6f\x40\x78\x86\x29\xa3\x47\xd0\x01\x6f\x23\x5c\x07\xfa\x67\x84\x3b\xc6\xe7\x59\xfc\x04\xaf\x92\x4c\x10\x85\xfe\x23\xe3\xcb\xd2\x34\xca\x1e\x3d\x04\xf2\xb1\xa5\xe8\xb1\xb9\x84\xb8\xaa\x35\x65\x31\x9a\x0e\x07\xed\xa6\x94\x47\x68\x02\x81\xed\x40\x3b\x9b\x6f\xfe\x38\xb4\x52\x75\x1f\x79\x94\xf3\x97\x48\x44\x41\x73\x28\x65\xe2\x89\xfb\x15\xf1\x3e\x96\xd7\xcd\x3e\x9f\x01\xa3\x6e\xc5\xaf\x73\x37\x4a\xdc\xbd\x37\x44\xde\xf4\x62\x75\xbb\x28\xf9\xd8\xed\x3e\x89\xb4\x35\xe2\x82\xe7\x25\xf8\x1d\x00\x00\xff\xff\x4b\xcb\x00\xe9\xc0\x04\x00\x00")

func filesDeploymentTfBytes() ([]byte, error) {
	return bindataRead(
		_filesDeploymentTf,
		"files/deployment.tf",
	)
}

func filesDeploymentTf() (*asset, error) {
	bytes, err := filesDeploymentTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/deployment.tf", size: 1216, mode: os.FileMode(420), modTime: time.Unix(1499373077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesDeployment_inputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x41\x0e\x82\x30\x10\x45\xf7\x3d\xc5\xa4\x07\x00\xd9\xb8\xf3\x2c\x4d\x81\x41\x26\xd4\x4e\x33\x33\x60\x0c\xd1\xb3\x1b\xdd\x18\x69\xfe\xee\xe5\xbd\xbf\x45\xa1\xd8\x27\x04\x2f\x78\x25\xce\x1e\xf6\xa7\x73\x3f\x5a\x84\x27\x4a\x78\xc4\xaa\x73\x28\x6b\x9f\x68\x08\x0b\x3e\x42\x89\x36\x7b\xd8\x1d\xc0\x88\x53\x5c\x93\xc1\x05\xfc\xab\x6d\x54\xe7\x96\xc6\x20\x1a\x9b\xb2\xf6\xde\xfd\x7d\x60\xde\x48\x38\xdf\x30\x5b\xd5\x1a\x73\xd2\x83\xaf\x16\x87\xa5\x32\x15\x65\x43\x39\xa8\x19\xed\xce\xb2\x84\x81\x46\xa9\x8a\xee\xd4\x7c\xd7\x76\xe7\x4f\xf6\x0e\x00\x00\xff\xff\xc8\x35\x55\xf2\x02\x01\x00\x00")

func filesDeployment_inputsTfBytes() ([]byte, error) {
	return bindataRead(
		_filesDeployment_inputsTf,
		"files/deployment_inputs.tf",
	)
}

func filesDeployment_inputsTf() (*asset, error) {
	bytes, err := filesDeployment_inputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/deployment_inputs.tf", size: 258, mode: os.FileMode(420), modTime: time.Unix(1499373058, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesDeployment_outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xca\x2f\x2d\x29\x28\x2d\x51\x50\x2a\x2d\xca\x51\x52\xa8\xe6\x52\x50\x28\x4b\xcc\x29\x4d\x55\xb0\x55\x50\x52\xa9\xce\xcd\x4f\x29\xcd\x49\xd5\x2b\x4a\xcc\x4b\xce\x48\x2d\x82\xd1\xf1\xc5\xa9\x45\x65\xa9\x45\xf1\xa5\x45\x39\xb5\x4a\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\x53\x5d\xc5\x4c\x43\x00\x00\x00")

func filesDeployment_outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_filesDeployment_outputsTf,
		"files/deployment_outputs.tf",
	)
}

func filesDeployment_outputsTf() (*asset, error) {
	bytes, err := filesDeployment_outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/deployment_outputs.tf", size: 67, mode: os.FileMode(420), modTime: time.Unix(1499710593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesTerraformTfvars = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd0\xc1\x0e\x82\x30\x0c\x06\xe0\xbb\x4f\x41\x78\x00\xde\xc0\x83\xf1\x64\xbc\x70\xf2\xba\x94\x51\x5d\x03\x6e\x4b\x57\x24\x84\xf0\xee\x66\x83\x83\x44\x21\xb1\xe7\xef\x4f\xfb\x97\xf1\x41\xce\x66\xab\x39\x66\xf9\x38\x16\x37\x60\x82\xaa\xc5\x50\xcc\x66\x9a\xf2\x83\x67\x77\xa7\x16\x77\xf5\x62\x22\x87\x3e\x28\xd0\xda\x75\x56\x14\xd5\xbf\xf9\xda\xc4\x54\x08\x46\xf9\xae\x6a\x49\xab\x06\x07\xe5\x41\xcc\x57\x2a\x04\x53\x26\x72\xc5\xa1\x04\x31\x31\x87\xf6\x45\xec\xec\x13\xad\x6c\x1e\xf7\x61\xd2\x2a\x01\xdd\x64\xfb\xed\x93\x89\xd8\xa2\xf4\x8e\x1b\xa5\xa9\xe6\x2d\xbc\x98\x33\xd5\xfc\xc7\x03\x4e\x33\xb9\xa4\xfa\xef\x00\x00\x00\xff\xff\x48\x27\xb4\xc2\x92\x01\x00\x00")

func filesTerraformTfvarsBytes() ([]byte, error) {
	return bindataRead(
		_filesTerraformTfvars,
		"files/terraform.tfvars",
	)
}

func filesTerraformTfvars() (*asset, error) {
	bytes, err := filesTerraformTfvarsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/terraform.tfvars", size: 402, mode: os.FileMode(420), modTime: time.Unix(1499371833, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/deployment.tf":         filesDeploymentTf,
	"files/deployment_inputs.tf":  filesDeployment_inputsTf,
	"files/deployment_outputs.tf": filesDeployment_outputsTf,
	"files/terraform.tfvars":      filesTerraformTfvars,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"files": {nil, map[string]*bintree{
		"deployment.tf":         {filesDeploymentTf, map[string]*bintree{}},
		"deployment_inputs.tf":  {filesDeployment_inputsTf, map[string]*bintree{}},
		"deployment_outputs.tf": {filesDeployment_outputsTf, map[string]*bintree{}},
		"terraform.tfvars":      {filesTerraformTfvars, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
