// Code generated by go-bindata.
// sources:
// templates/ciServer/templates/ci_inputs.tf
// templates/ciServer/templates/ci_server.tf
// DO NOT EDIT!

package ciServer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCi_inputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4b\x2c\xca\x4c\x4c\xca\x49\x55\x50\x4a\xcd\x2b\xcb\x2c\xca\xcf\xcb\x4d\xcd\x2b\x51\x52\xa8\xe6\x52\x50\x48\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x53\xb0\x55\x50\xf2\x4b\xcc\x4d\x55\xc8\x4f\x53\x70\x45\x52\x07\x56\x95\x96\x58\x9a\x53\x02\x52\x51\x5d\xad\x17\x06\x35\xae\x58\x0f\xc9\xb8\xda\x5a\x25\xae\x5a\x2e\x2e\x84\x55\x79\xa9\x25\xe5\xf9\x45\xd9\xf1\xc9\x99\x29\x45\x58\xed\x72\xf6\x74\x09\x52\x48\xcb\x2f\x52\xf0\x83\xa8\xc4\x67\x11\xd4\x30\xe7\xcc\x94\x22\x88\x45\x80\x00\x00\x00\xff\xff\x36\x16\x1d\x2c\xd3\x00\x00\x00")

func templatesCi_inputsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCi_inputsTf,
		"templates/ci_inputs.tf",
	)
}

func templatesCi_inputsTf() (*asset, error) {
	bytes, err := templatesCi_inputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ci_inputs.tf", size: 211, mode: os.FileMode(420), modTime: time.Unix(1499710961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCi_serverTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\x41\x8e\xc2\x30\x0c\x45\xf7\x3e\x85\x95\x99\xed\x34\x27\x98\xd5\xac\x66\x5d\xc4\xb6\x0a\xae\x91\x2c\xda\x04\x39\x49\x11\x8a\x72\x77\xa4\x04\x44\xf1\xf2\xfd\xff\x9f\xe1\x0b\xff\xfe\x71\x64\xdd\x58\x61\x0d\x73\x5e\x18\x0d\xc9\x14\x1b\x31\x58\x00\x31\x86\xac\xc4\xd8\xef\x17\x4d\x29\xc3\xd1\xa9\xb8\xd3\xc2\x71\xe8\x9b\xb1\x55\x6a\xb5\x56\xfc\x59\x5d\x4c\x9a\x29\x65\x65\xdb\xe3\x68\x49\xec\xc7\x8c\xe4\x70\xbf\x72\xad\x06\x10\xbd\x5b\x5f\xf6\xe6\x27\xf9\x79\xbe\x07\x44\xf6\x9b\x68\xf0\x2b\xfb\xd4\xc2\xef\xb2\x39\x1d\x76\xb4\x2b\x38\xdd\x82\x5e\x26\x92\x59\xdf\xad\x3d\xad\x06\x2a\x3c\x02\x00\x00\xff\xff\x54\x0a\x21\xa4\xee\x00\x00\x00")

func templatesCi_serverTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCi_serverTf,
		"templates/ci_server.tf",
	)
}

func templatesCi_serverTf() (*asset, error) {
	bytes, err := templatesCi_serverTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ci_server.tf", size: 238, mode: os.FileMode(420), modTime: time.Unix(1499372013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/ci_inputs.tf": templatesCi_inputsTf,
	"templates/ci_server.tf": templatesCi_serverTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"ci_inputs.tf": {templatesCi_inputsTf, map[string]*bintree{}},
		"ci_server.tf": {templatesCi_serverTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
