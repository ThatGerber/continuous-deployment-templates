// Code generated by go-bindata.
// sources:
// templates/ciServer/templates/ci_inputs.tf
// templates/ciServer/templates/ci_server.tf
// DO NOT EDIT!

package ciServer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCi_inputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4b\x2c\xca\x4c\x4c\xca\x49\x55\x50\x4a\xcd\x2b\xcb\x2c\xca\xcf\xcb\x4d\xcd\x2b\x51\x52\xa8\xe6\x52\x50\x48\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x53\xb0\x55\x50\xf2\x4b\xcc\x4d\x55\xc8\x4f\x53\x70\x45\x52\x07\x56\x95\x96\x58\x9a\x53\x02\x52\x51\x5d\xad\x87\x64\x48\x6d\xad\x12\x57\x2d\x17\x17\xc2\x82\xbc\xd4\x92\xf2\xfc\xa2\xec\xf8\xe4\xcc\x94\x22\xac\x36\x38\x7b\xba\x04\x29\xa4\xe5\x17\x29\xf8\x41\x54\x62\x1a\x0f\x35\xc2\x39\x33\xa5\x08\x62\x3c\x20\x00\x00\xff\xff\x3d\x2f\x8a\xc5\xbf\x00\x00\x00")

func templatesCi_inputsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCi_inputsTf,
		"templates/ci_inputs.tf",
	)
}

func templatesCi_inputsTf() (*asset, error) {
	bytes, err := templatesCi_inputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ci_inputs.tf", size: 191, mode: os.FileMode(420), modTime: time.Unix(1500572288, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCi_serverTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x31\xce\xc2\x30\x0c\x46\x77\x9f\xc2\xca\xff\xaf\x34\x27\x60\x62\x62\x2e\x7b\x55\xb9\x46\xb2\xa0\x09\x72\x92\x22\x14\xf9\xee\x48\x09\x88\x7a\x7c\xef\xd3\x33\xfc\xe1\xe9\x8c\x23\xeb\xc6\x0a\x6b\x5c\xca\x9d\xd1\x91\x4c\xa9\x11\x87\x15\x10\x53\x2c\x4a\x8c\xfd\x8e\xe8\x6a\x1d\xfa\x72\x6c\xc2\xcc\x7b\x09\x57\x9d\x53\xd6\x42\xb9\x28\xfb\xae\x93\x27\xf1\xb5\x0e\x24\x97\xd7\x83\xcd\x1c\x20\x86\x79\xfd\x96\x5a\x8b\xe4\xf0\x79\x05\x88\x1c\x36\xd1\x18\x56\x0e\xb9\xc9\xff\xba\xcd\x3a\xec\x68\x4f\x70\x7e\x46\xbd\x4d\x24\x8b\xfe\x56\x7b\x6a\x0e\x0c\xde\x01\x00\x00\xff\xff\xc9\xa4\xa2\x46\xda\x00\x00\x00")

func templatesCi_serverTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCi_serverTf,
		"templates/ci_server.tf",
	)
}

func templatesCi_serverTf() (*asset, error) {
	bytes, err := templatesCi_serverTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ci_server.tf", size: 218, mode: os.FileMode(420), modTime: time.Unix(1500498188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/ci_inputs.tf": templatesCi_inputsTf,
	"templates/ci_server.tf": templatesCi_serverTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"ci_inputs.tf": {templatesCi_inputsTf, map[string]*bintree{}},
		"ci_server.tf": {templatesCi_serverTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
